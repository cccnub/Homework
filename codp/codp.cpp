

#include <iostream>

// 시작~ 비트연산자 

//주석 < 이 문법 자체가 사람들끼리 정보를 공유하기 위한 문법, 코드에 어떠한 영향도 없음
//주석은 프로그램을 만드는데에 필요가 없다.

//전처리기의 역할
//1.주석삭제 2.#include<>""를 통한 코드 복사 붙여넣기 
//#inclue = 전처리문 

//함수
//리턴값 이름 인자 
// int   main ()
// {} 흐름의 시작과 끝 
// 스코프 안에는 코드(컴퓨터에 요구사항) 이 입력된다. 
//함수의 실행흐름을 한줄한줄씩 보내는 것을 쓰레드 라고 하며, 
//그 쓰레드는 스택영역이라는 것을 가진다. 

int main()
{
	int Att = 0;
	int A = 0;
	int B = 1;
	// Att라는 이름에 값에 0을 넣어야 한다.
	// F5를 누르고 main의 실행흐름이 만들어지면 진짜 공격력이 만들어지고
	// 거기에 0이라는 값이 들어가게 된다.
	// 이때 0 은 '상수' 라고 하며 
	// 상수는 프로그램이 동작하면서 절대 바뀌지 않는 값, exe 파일에
	// 새겨진 값이라고 생각하면 된다. 

	int Attack = 100;
	// 4바이트 메모리를 할당해라, 
	// ?? 번째 바이트 (Attack)에 
	// 메모리가 만들어지면 코드영역에 존재하는 ~ 번째 바이트의
	// 4바이트 메모리 영역에 있는 값을 

	// int = 4바이트 자료형 

	// 어떤 값을 가져오려면 항상 메모리를 받아서 사용해야 한다.
	// ex) A - B = ???;
	// ??? 의 값을 이름을 지어서 사용해야함 
	// int Result = A - B ; 

	// 1. 산술연산자
	// + 덧셈 , - 뺄셈 , * 곱셈 , / 나눗셈 , % 나머지

	bool Result = true;
	//bool = 기본자료형, 1바이트 논리형 
	//참과 거짓을 표기하기 위한 자료형이다. 

	// 2. 비교연산자
	// 이 연산자가 리턴(결과값) 1바이트 논리형

	Result = A > B; // A가 B보다 크냐?
	Result = A < B; // B가 A보다 크냐?
	Result = A >= B; // A가 B보다 크거나 같냐?
	Result = A <= B; // B가 A보다 크거나 같냐?
	Result = A == B; // A랑 B가 같냐?
	Result = A != B; // A랑 B랑 다르냐?

	// 3. 논리연산자
	// 참과 거짓을 기반으로 참이나 거짓을 리턴한다.
	// 논리형 and, && 양쪽다 참이라면 참, 아니면 거짓
	Result = true && false;

	// 논리형 or, || 둘중 하나가 참이라면 참, 아니면 거짓
	Result = true || false;

	//연산자를 사용할 때, 오른쪽만 필요하면 단항연산자,
	//양쪽이 다 필요하면 이항연산자 라고 한다.


	//int 는 음수까지 표현할 수 있으며, 양수만 표현하고 싶다면
	//unsigned를 앞에 붙이면 양수만 표현한다. 

	// 4. 비트 연산자
	
	//비트반전
	//어떠한 이름이 관리하는 메모리영역의 모든 비트를 반전시킨다.
	Result = ~B;

	//비트 or , | 
	//위쪽과 아래 비트를 비교하여 둘중 하나라도 1이 있으면 그 순서의 비트는 1
	//아니라면 0 이된다.

	//비트 and , &
	//위쪽과 아래 비트를 비교하여 둘다 1이라면 1, 아니면 0
	

	//비트XOR , ^
	//위아래 비트를 비교하여 두개의 비트가 '다르면 1' , '아니면 0'


	



}



